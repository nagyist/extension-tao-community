{"version":3,"mappings":"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","names":["define","$","Math","defaultOptions","skin","hScroll","vScroll","updateOnWindowResize","animationSpeed","onCustomScroll","swipeSpeed","wheelSpeed","fixedThumbWidth","fixedThumbHeight","preventDefaultScroll","Scrollable","addScrollableClass","removeScrollableClass","addSkinClass","removeSkinClass","addScrollBarComponents","removeScrollbarComponents","removeScrollbar","assignViewPort","assignOverview","addScrollBar","resize","scrollTo","scrollToXY","scrollToX","scrollToY","scrollByX","scrollByY","remove","setAnimationSpeed","isInside","$element","$wrappingElement","elementOffset","wrappingElementOffset","initKeyboardScrolling","document","_this","attr","keydown","removeKeyboardScrolling","removeAttr","unbind","bindEvents","Scrollbar","calculateViewPortSize","elementSize","calculateThumbSize","size","fixedSize","initMouseMoveScrolling","event","removeMouseMoveScrolling","initMouseWheelScrolling","removeMouseWheelScrolling","initTouchScrolling","removeTouchScrolling","initMouseClickScrolling","removeMouseClickScrolling","initWindowResize","removeWindowResize","isKeyScrolling","keyScrollDelta","startMouseMoveScrolling","stopMouseMoveScrolling","setUnselectable","element","mouseMoveScroll","startTouchScrolling","touchScroll","delta","scrolled","stopTouchScrolling","mouseWheelScroll","mouseClickScroll","keyScroll","scrollThumbBy","thumbPosition","scrollOverviewBy","overviewPosition","scrollOverviewTo","animate","positionOrMax","p","max","triggerCustomScroll","scrollAxis","direction","scrollPercent","rescroll","setScrollPosition","setScrollPositionWithAnimation","thumbAnimationOpts","overviewAnimationOpts","calculateMaxThumbPosition","calculateMaxOverviewPosition","setScrollEvent","scrollToElement","overviewOffset","viewPortOffset","stopEventConditionally","condition","HSizing","arg","$el","minSize","maxSize","fixedThumbSize","scrollBar","mouseDelta","offsetComponent","wheelDelta","scrollDirection","scrollingKeys","VSizing","options","scrollable","jQuery","orgEvent","deltaY","deltaX","args","setup","teardown","mousewheel","unmousewheel","init","$splashWrapper","$splashDesc","$splashDiagram","isHomePage","$this","initNav","selectedPanelId","initModulesNav","selectedModuleName","splashObj","selectedEl","initCloseButton","$closeButton","e","closeSplash","window","adaptHeight","$splashContentWrap","maxHeight","$mainContainer","homeController","entrySplash","start","success","response","$splash","splash"],"sources":["../controller/home/custom-scrollbar.js","../controller/home/splash.js","../controller/home.js","../controller/help.js","../controller/routes.js","module-create.js"],"sourcesContent":["define('taoCe/controller/home/custom-scrollbar',['jquery'], function(jQuery){\n(function ($) {\n\n  $.fn.customScrollbar = function (options, args) {\n\n    var defaultOptions = {\n      skin: undefined,\n      hScroll: true,\n      vScroll: true,\n      updateOnWindowResize: false,\n      animationSpeed: 300,\n      onCustomScroll: undefined,\n      swipeSpeed: 1,\n      wheelSpeed: 40,\n      fixedThumbWidth: undefined,\n      fixedThumbHeight: undefined,\n      preventDefaultScroll: false\n    }\n\n    var Scrollable = function (element, options) {\n      this.$element = $(element);\n      this.options = options;\n      this.addScrollableClass();\n      this.addSkinClass();\n      this.addScrollBarComponents();\n      if (this.options.vScroll)\n        this.vScrollbar = new Scrollbar(this, new VSizing());\n      if (this.options.hScroll)\n        this.hScrollbar = new Scrollbar(this, new HSizing());\n      this.$element.data(\"scrollable\", this);\n      this.initKeyboardScrolling();\n      this.bindEvents();\n    }\n\n    Scrollable.prototype = {\n\n      addScrollableClass: function () {\n        if (!this.$element.hasClass(\"scrollable\")) {\n          this.scrollableAdded = true;\n          this.$element.addClass(\"scrollable\");\n        }\n      },\n\n      removeScrollableClass: function () {\n        if (this.scrollableAdded)\n          this.$element.removeClass(\"scrollable\");\n      },\n\n      addSkinClass: function () {\n        if (typeof(this.options.skin) == \"string\" && !this.$element.hasClass(this.options.skin)) {\n          this.skinClassAdded = true;\n          this.$element.addClass(this.options.skin);\n        }\n      },\n\n      removeSkinClass: function () {\n        if (this.skinClassAdded)\n          this.$element.removeClass(this.options.skin);\n      },\n\n      addScrollBarComponents: function () {\n        this.assignViewPort();\n        if (this.$viewPort.length == 0) {\n          this.$element.wrapInner(\"<div class=\\\"viewport\\\" />\");\n          this.assignViewPort();\n          this.viewPortAdded = true;\n        }\n        this.assignOverview();\n        if (this.$overview.length == 0) {\n          this.$viewPort.wrapInner(\"<div class=\\\"overview\\\" />\");\n          this.assignOverview();\n          this.overviewAdded = true;\n        }\n        this.addScrollBar(\"vertical\", \"prepend\");\n        this.addScrollBar(\"horizontal\", \"append\");\n      },\n\n      removeScrollbarComponents: function () {\n        this.removeScrollbar(\"vertical\");\n        this.removeScrollbar(\"horizontal\");\n        if (this.overviewAdded)\n          this.$element.unwrap();\n        if (this.viewPortAdded)\n          this.$element.unwrap();\n      },\n\n      removeScrollbar: function (orientation) {\n        if (this[orientation + \"ScrollbarAdded\"])\n          this.$element.find(\".scroll-bar.\" + orientation).remove();\n      },\n\n      assignViewPort: function () {\n        this.$viewPort = this.$element.find(\".viewport\");\n      },\n\n      assignOverview: function () {\n        this.$overview = this.$viewPort.find(\".overview\");\n      },\n\n      addScrollBar: function (orientation, fun) {\n        if (this.$element.find(\".scroll-bar.\" + orientation).length == 0) {\n          this.$element[fun](\"<div class='scroll-bar \" + orientation + \"'><div class='thumb'></div></div>\")\n          this[orientation + \"ScrollbarAdded\"] = true;\n        }\n      },\n\n      resize: function (keepPosition) {\n        if (this.vScrollbar)\n          this.vScrollbar.resize(keepPosition);\n        if (this.hScrollbar)\n          this.hScrollbar.resize(keepPosition);\n      },\n\n      scrollTo: function (element) {\n        if (this.vScrollbar)\n          this.vScrollbar.scrollToElement(element);\n        if (this.hScrollbar)\n          this.hScrollbar.scrollToElement(element);\n      },\n\n      scrollToXY: function (x, y) {\n        this.scrollToX(x);\n        this.scrollToY(y);\n      },\n\n      scrollToX: function (x) {\n        if (this.hScrollbar)\n          this.hScrollbar.scrollOverviewTo(x, true);\n      },\n\n      scrollToY: function (y) {\n        if (this.vScrollbar)\n          this.vScrollbar.scrollOverviewTo(y, true);\n      },\n\n      scrollByX: function (x) {\n        if (this.hScrollbar)\n          this.scrollToX(this.hScrollbar.overviewPosition() + x);\n      },\n\n      scrollByY: function (y) {\n        if (this.vScrollbar)\n          this.scrollToY(this.vScrollbar.overviewPosition() + y);\n      },\n\n      remove: function () {\n        this.removeScrollableClass();\n        this.removeSkinClass();\n        this.removeScrollbarComponents();\n        this.$element.data(\"scrollable\", null);\n        this.removeKeyboardScrolling();\n        if (this.vScrollbar)\n          this.vScrollbar.remove();\n        if (this.hScrollbar)\n          this.hScrollbar.remove();\n      },\n\n      setAnimationSpeed: function (speed) {\n        this.options.animationSpeed = speed;\n      },\n\n      isInside: function (element, wrappingElement) {\n        var $element = $(element);\n        var $wrappingElement = $(wrappingElement);\n        var elementOffset = $element.offset();\n        var wrappingElementOffset = $wrappingElement.offset();\n        return (elementOffset.top >= wrappingElementOffset.top) && (elementOffset.left >= wrappingElementOffset.left) &&\n          (elementOffset.top + $element.height() <= wrappingElementOffset.top + $wrappingElement.height()) &&\n          (elementOffset.left + $element.width() <= wrappingElementOffset.left + $wrappingElement.width())\n      },\n\n      initKeyboardScrolling: function () {\n        var _this = this;\n\n        this.elementKeydown = function (event) {\n          if (document.activeElement === _this.$element[0]) {\n            if (_this.vScrollbar)\n              _this.vScrollbar.keyScroll(event);\n            if (_this.hScrollbar)\n              _this.hScrollbar.keyScroll(event);\n          }\n        }\n\n        this.$element\n          .attr('tabindex', '-1')\n          .keydown(this.elementKeydown);\n      },\n\n      removeKeyboardScrolling: function () {\n        this.$element\n          .removeAttr('tabindex')\n          .unbind(\"keydown\", this.elementKeydown);\n      },\n\n      bindEvents: function () {\n        if (this.options.onCustomScroll)\n          this.$element.on(\"customScroll\", this.options.onCustomScroll);\n      }\n\n    }\n\n    var Scrollbar = function (scrollable, sizing) {\n      this.scrollable = scrollable;\n      this.sizing = sizing\n      this.$scrollBar = this.sizing.scrollBar(this.scrollable.$element);\n      this.$thumb = this.$scrollBar.find(\".thumb\");\n      this.setScrollPosition(0, 0);\n      this.resize();\n      this.initMouseMoveScrolling();\n      this.initMouseWheelScrolling();\n      this.initTouchScrolling();\n      this.initMouseClickScrolling();\n      this.initWindowResize();\n    }\n\n    Scrollbar.prototype = {\n\n      resize: function (keepPosition) {\n        this.overviewSize = this.sizing.size(this.scrollable.$overview);\n        this.calculateViewPortSize();\n        this.sizing.size(this.scrollable.$viewPort, this.viewPortSize);\n        this.ratio = this.viewPortSize / this.overviewSize;\n        this.sizing.size(this.$scrollBar, this.viewPortSize);\n        this.thumbSize = this.calculateThumbSize();\n        this.sizing.size(this.$thumb, this.thumbSize);\n        this.maxThumbPosition = this.calculateMaxThumbPosition();\n        this.maxOverviewPosition = this.calculateMaxOverviewPosition();\n        this.enabled = (this.overviewSize > this.viewPortSize);\n        if (this.scrollPercent === undefined)\n          this.scrollPercent = 0.0;\n        if (this.enabled)\n          this.rescroll(keepPosition);\n        else\n          this.setScrollPosition(0, 0);\n        this.$scrollBar.toggle(this.enabled);\n      },\n\n      calculateViewPortSize: function () {\n        var elementSize = this.sizing.size(this.scrollable.$element);\n        if (elementSize > 0 && !this.maxSizeUsed) {\n          this.viewPortSize = elementSize;\n          this.maxSizeUsed = false;\n        }\n        else {\n          var maxSize = this.sizing.maxSize(this.scrollable.$element);\n          this.viewPortSize = Math.min(maxSize, this.overviewSize);\n          this.maxSizeUsed = true;\n        }\n      },\n\n      calculateThumbSize: function () {\n        var fixedSize = this.sizing.fixedThumbSize(this.scrollable.options)\n        var size;\n        if (fixedSize)\n          size = fixedSize;\n        else\n          size = this.ratio * this.viewPortSize\n        return Math.max(size, this.sizing.minSize(this.$thumb));\n      },\n\n      initMouseMoveScrolling: function () {\n        var _this = this;\n        this.$thumb.mousedown(function (event) {\n          if (_this.enabled)\n            _this.startMouseMoveScrolling(event);\n        });\n        this.documentMouseup = function (event) {\n          _this.stopMouseMoveScrolling(event);\n        };\n        $(document).mouseup(this.documentMouseup);\n        this.documentMousemove = function (event) {\n          _this.mouseMoveScroll(event);\n        };\n        $(document).mousemove(this.documentMousemove);\n        this.$thumb.click(function (event) {\n          event.stopPropagation();\n        });\n      },\n\n      removeMouseMoveScrolling: function () {\n        this.$thumb.unbind();\n        $(document).unbind(\"mouseup\", this.documentMouseup);\n        $(document).unbind(\"mousemove\", this.documentMousemove);\n      },\n\n      initMouseWheelScrolling: function () {\n        var _this = this;\n        this.scrollable.$element.mousewheel(function (event, delta, deltaX, deltaY) {\n          if (_this.enabled) {\n            var scrolled = _this.mouseWheelScroll(deltaX, deltaY);\n            _this.stopEventConditionally(event, scrolled);\n          }\n        });\n      },\n\n      removeMouseWheelScrolling: function () {\n        this.scrollable.$element.unbind(\"mousewheel\");\n      },\n\n      initTouchScrolling: function () {\n        if (document.addEventListener) {\n          var _this = this;\n          this.elementTouchstart = function (event) {\n            if (_this.enabled)\n              _this.startTouchScrolling(event);\n          }\n          this.scrollable.$element[0].addEventListener(\"touchstart\", this.elementTouchstart);\n          this.documentTouchmove = function (event) {\n            _this.touchScroll(event);\n          }\n          document.addEventListener(\"touchmove\", this.documentTouchmove);\n          this.elementTouchend = function (event) {\n            _this.stopTouchScrolling(event);\n          }\n          this.scrollable.$element[0].addEventListener(\"touchend\", this.elementTouchend);\n        }\n      },\n\n      removeTouchScrolling: function () {\n        if (document.addEventListener) {\n          this.scrollable.$element[0].removeEventListener(\"touchstart\", this.elementTouchstart);\n          document.removeEventListener(\"touchmove\", this.documentTouchmove);\n          this.scrollable.$element[0].removeEventListener(\"touchend\", this.elementTouchend);\n        }\n      },\n\n      initMouseClickScrolling: function () {\n        var _this = this;\n        this.scrollBarClick = function (event) {\n          _this.mouseClickScroll(event);\n        };\n        this.$scrollBar.click(this.scrollBarClick);\n      },\n\n      removeMouseClickScrolling: function () {\n        this.$scrollBar.unbind(\"click\", this.scrollBarClick);\n      },\n\n      initWindowResize: function () {\n        if (this.scrollable.options.updateOnWindowResize) {\n          var _this = this;\n          this.windowResize = function () {\n            _this.resize();\n          };\n          $(window).resize(this.windowResize);\n        }\n      },\n\n      removeWindowResize: function () {\n        $(window).unbind(\"resize\", this.windowResize);\n      },\n\n      isKeyScrolling: function (key) {\n        return this.keyScrollDelta(key) != null;\n      },\n\n      keyScrollDelta: function (key) {\n        for (var scrollingKey in this.sizing.scrollingKeys)\n          if (scrollingKey == key)\n            return this.sizing.scrollingKeys[key](this.viewPortSize);\n        return null;\n      },\n\n      startMouseMoveScrolling: function (event) {\n        this.mouseMoveScrolling = true;\n        $(\"html\").addClass(\"not-selectable\");\n        this.setUnselectable($(\"html\"), \"on\");\n        this.setScrollEvent(event);\n      },\n\n      stopMouseMoveScrolling: function (event) {\n        this.mouseMoveScrolling = false;\n        $(\"html\").removeClass(\"not-selectable\");\n        this.setUnselectable($(\"html\"), null);\n      },\n\n      setUnselectable: function (element, value) {\n        if (element.attr(\"unselectable\") != value) {\n          element.attr(\"unselectable\", value);\n          element.find(':not(input)').attr('unselectable', value);\n        }\n      },\n\n      mouseMoveScroll: function (event) {\n        if (this.mouseMoveScrolling) {\n          var delta = this.sizing.mouseDelta(this.scrollEvent, event);\n          this.scrollThumbBy(delta);\n          this.setScrollEvent(event);\n        }\n      },\n\n      startTouchScrolling: function (event) {\n        if (event.touches && event.touches.length == 1) {\n          this.setScrollEvent(event.touches[0]);\n          this.touchScrolling = true;\n          event.stopPropagation();\n        }\n      },\n\n      touchScroll: function (event) {\n        if (this.touchScrolling && event.touches && event.touches.length == 1) {\n          var delta = -this.sizing.mouseDelta(this.scrollEvent, event.touches[0]) * this.scrollable.options.swipeSpeed;\n          var scrolled = this.scrollOverviewBy(delta);\n          if (scrolled)\n            this.setScrollEvent(event.touches[0]);\n          this.stopEventConditionally(event, scrolled);\n        }\n      },\n\n      stopTouchScrolling: function (event) {\n        this.touchScrolling = false;\n        event.stopPropagation();\n      },\n\n      mouseWheelScroll: function (deltaX, deltaY) {\n        var delta = -this.sizing.wheelDelta(deltaX, deltaY) * this.scrollable.options.wheelSpeed;\n        if (delta != 0)\n          return this.scrollOverviewBy(delta);\n      },\n\n      mouseClickScroll: function (event) {\n        var delta = this.viewPortSize - 20;\n        if (event[\"page\" + this.sizing.scrollAxis()] < this.$thumb.offset()[this.sizing.offsetComponent()])\n        // mouse click over thumb\n          delta = -delta;\n        this.scrollOverviewBy(delta);\n      },\n\n      keyScroll: function (event) {\n        var keyDown = event.which;\n        if (this.enabled && this.isKeyScrolling(keyDown)) {\n          var scrolled = this.scrollOverviewBy(this.keyScrollDelta(keyDown));\n          this.stopEventConditionally(event, scrolled);\n        }\n      },\n\n      scrollThumbBy: function (delta) {\n        var thumbPosition = this.thumbPosition();\n        thumbPosition += delta;\n        thumbPosition = this.positionOrMax(thumbPosition, this.maxThumbPosition);\n        var oldScrollPercent = this.scrollPercent;\n        this.scrollPercent = thumbPosition / this.maxThumbPosition;\n        if (oldScrollPercent != this.scrollPercent) {\n          var overviewPosition = (thumbPosition * this.maxOverviewPosition) / this.maxThumbPosition;\n          this.setScrollPosition(overviewPosition, thumbPosition);\n          this.triggerCustomScroll(oldScrollPercent);\n          return true\n        }\n        else\n          return false;\n      },\n\n      thumbPosition: function () {\n        return this.$thumb.position()[this.sizing.offsetComponent()];\n      },\n\n      scrollOverviewBy: function (delta) {\n        var overviewPosition = this.overviewPosition() + delta;\n        return this.scrollOverviewTo(overviewPosition, false);\n      },\n\n      overviewPosition: function () {\n        return -this.scrollable.$overview.position()[this.sizing.offsetComponent()];\n      },\n\n      scrollOverviewTo: function (overviewPosition, animate) {\n        overviewPosition = this.positionOrMax(overviewPosition, this.maxOverviewPosition);\n        var oldScrollPercent = this.scrollPercent;\n        this.scrollPercent = overviewPosition / this.maxOverviewPosition;\n        if (oldScrollPercent != this.scrollPercent) {\n          var thumbPosition = this.scrollPercent * this.maxThumbPosition;\n          if (animate)\n            this.setScrollPositionWithAnimation(overviewPosition, thumbPosition);\n          else\n            this.setScrollPosition(overviewPosition, thumbPosition);\n          this.triggerCustomScroll(oldScrollPercent);\n          return true;\n        }\n        else\n          return false;\n      },\n\n      positionOrMax: function (p, max) {\n        if (p < 0)\n          return 0;\n        else if (p > max)\n          return max;\n        else\n          return p;\n      },\n\n      triggerCustomScroll: function (oldScrollPercent) {\n        this.scrollable.$element.trigger(\"customScroll\", {\n            scrollAxis: this.sizing.scrollAxis(),\n            direction: this.sizing.scrollDirection(oldScrollPercent, this.scrollPercent),\n            scrollPercent: this.scrollPercent * 100\n          }\n        );\n      },\n\n      rescroll: function (keepPosition) {\n        if (keepPosition) {\n          var overviewPosition = this.positionOrMax(this.overviewPosition(), this.maxOverviewPosition);\n          this.scrollPercent = overviewPosition / this.maxOverviewPosition;\n          var thumbPosition = this.scrollPercent * this.maxThumbPosition;\n          this.setScrollPosition(overviewPosition, thumbPosition);\n        }\n        else {\n          var thumbPosition = this.scrollPercent * this.maxThumbPosition;\n          var overviewPosition = this.scrollPercent * this.maxOverviewPosition;\n          this.setScrollPosition(overviewPosition, thumbPosition);\n        }\n      },\n\n      setScrollPosition: function (overviewPosition, thumbPosition) {\n        this.$thumb.css(this.sizing.offsetComponent(), thumbPosition + \"px\");\n        this.scrollable.$overview.css(this.sizing.offsetComponent(), -overviewPosition + \"px\");\n      },\n\n      setScrollPositionWithAnimation: function (overviewPosition, thumbPosition) {\n        var thumbAnimationOpts = {};\n        var overviewAnimationOpts = {};\n        thumbAnimationOpts[this.sizing.offsetComponent()] = thumbPosition + \"px\";\n        this.$thumb.animate(thumbAnimationOpts, this.scrollable.options.animationSpeed);\n        overviewAnimationOpts[this.sizing.offsetComponent()] = -overviewPosition + \"px\";\n        this.scrollable.$overview.animate(overviewAnimationOpts, this.scrollable.options.animationSpeed);\n      },\n\n      calculateMaxThumbPosition: function () {\n        return Math.max(0, this.sizing.size(this.$scrollBar) - this.thumbSize);\n      },\n\n      calculateMaxOverviewPosition: function () {\n        return Math.max(0, this.sizing.size(this.scrollable.$overview) - this.sizing.size(this.scrollable.$viewPort));\n      },\n\n      setScrollEvent: function (event) {\n        var attr = \"page\" + this.sizing.scrollAxis();\n        if (!this.scrollEvent || this.scrollEvent[attr] != event[attr])\n          this.scrollEvent = {pageX: event.pageX, pageY: event.pageY};\n      },\n\n      scrollToElement: function (element) {\n        var $element = $(element);\n        if (this.sizing.isInside($element, this.scrollable.$overview) && !this.sizing.isInside($element, this.scrollable.$viewPort)) {\n          var elementOffset = $element.offset();\n          var overviewOffset = this.scrollable.$overview.offset();\n          var viewPortOffset = this.scrollable.$viewPort.offset();\n          this.scrollOverviewTo(elementOffset[this.sizing.offsetComponent()] - overviewOffset[this.sizing.offsetComponent()], true);\n        }\n      },\n\n      remove: function () {\n        this.removeMouseMoveScrolling();\n        this.removeMouseWheelScrolling();\n        this.removeTouchScrolling();\n        this.removeMouseClickScrolling();\n        this.removeWindowResize();\n      },\n\n      stopEventConditionally: function (event, condition) {\n        if (condition || this.scrollable.options.preventDefaultScroll) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n      }\n\n    }\n\n    var HSizing = function () {\n    }\n\n    HSizing.prototype = {\n      size: function ($el, arg) {\n        if (arg)\n          return $el.width(arg);\n        else\n          return $el.width();\n      },\n\n      minSize: function ($el) {\n        return parseInt($el.css(\"min-width\")) || 0;\n      },\n\n      maxSize: function ($el) {\n        return parseInt($el.css(\"max-width\")) || 0;\n      },\n\n      fixedThumbSize: function (options) {\n        return options.fixedThumbWidth;\n      },\n\n      scrollBar: function ($el) {\n        return $el.find(\".scroll-bar.horizontal\");\n      },\n\n      mouseDelta: function (event1, event2) {\n        return event2.pageX - event1.pageX;\n      },\n\n      offsetComponent: function () {\n        return \"left\";\n      },\n\n      wheelDelta: function (deltaX, deltaY) {\n        return deltaX;\n      },\n\n      scrollAxis: function () {\n        return \"X\";\n      },\n\n      scrollDirection: function (oldPercent, newPercent) {\n        return oldPercent < newPercent ? \"right\" : \"left\";\n      },\n\n      scrollingKeys: {\n        37: function (viewPortSize) {\n          return -10; //arrow left\n        },\n        39: function (viewPortSize) {\n          return 10; //arrow right\n        }\n      },\n\n      isInside: function (element, wrappingElement) {\n        var $element = $(element);\n        var $wrappingElement = $(wrappingElement);\n        var elementOffset = $element.offset();\n        var wrappingElementOffset = $wrappingElement.offset();\n        return (elementOffset.left >= wrappingElementOffset.left) &&\n          (elementOffset.left + $element.width() <= wrappingElementOffset.left + $wrappingElement.width());\n      }\n\n    }\n\n    var VSizing = function () {\n    }\n\n    VSizing.prototype = {\n\n      size: function ($el, arg) {\n        if (arg)\n          return $el.height(arg);\n        else\n          return $el.height();\n      },\n\n      minSize: function ($el) {\n        return parseInt($el.css(\"min-height\")) || 0;\n      },\n\n      maxSize: function ($el) {\n        return parseInt($el.css(\"max-height\")) || 0;\n      },\n\n      fixedThumbSize: function (options) {\n        return options.fixedThumbHeight;\n      },\n\n      scrollBar: function ($el) {\n        return $el.find(\".scroll-bar.vertical\");\n      },\n\n      mouseDelta: function (event1, event2) {\n        return event2.pageY - event1.pageY;\n      },\n\n      offsetComponent: function () {\n        return \"top\";\n      },\n\n      wheelDelta: function (deltaX, deltaY) {\n        return deltaY;\n      },\n\n      scrollAxis: function () {\n        return \"Y\";\n      },\n\n      scrollDirection: function (oldPercent, newPercent) {\n        return oldPercent < newPercent ? \"down\" : \"up\";\n      },\n\n      scrollingKeys: {\n        38: function (viewPortSize) {\n          return -10; //arrow up\n        },\n        40: function (viewPortSize) {\n          return 10; //arrow down\n        },\n        33: function (viewPortSize) {\n          return -(viewPortSize - 20); //page up\n        },\n        34: function (viewPortSize) {\n          return viewPortSize - 20; //page down\n        }\n      },\n\n      isInside: function (element, wrappingElement) {\n        var $element = $(element);\n        var $wrappingElement = $(wrappingElement);\n        var elementOffset = $element.offset();\n        var wrappingElementOffset = $wrappingElement.offset();\n        return (elementOffset.top >= wrappingElementOffset.top) &&\n          (elementOffset.top + $element.height() <= wrappingElementOffset.top + $wrappingElement.height());\n      }\n\n    }\n\n    return this.each(function () {\n      if (options == undefined)\n        options = defaultOptions;\n      if (typeof(options) == \"string\") {\n        var scrollable = $(this).data(\"scrollable\");\n        if (scrollable)\n          scrollable[options](args);\n      }\n      else if (typeof(options) == \"object\") {\n        options = $.extend(defaultOptions, options);\n        new Scrollable($(this), options);\n      }\n      else\n        throw \"Invalid type of options\";\n    });\n\n  }\n  ;\n\n})\n  (jQuery);\n\n(function ($) {\n\n  var types = ['DOMMouseScroll', 'mousewheel'];\n\n  if ($.event.fixHooks) {\n    for (var i = types.length; i;) {\n      $.event.fixHooks[ types[--i] ] = $.event.mouseHooks;\n    }\n  }\n\n  $.event.special.mousewheel = {\n    setup: function () {\n      if (this.addEventListener) {\n        for (var i = types.length; i;) {\n          this.addEventListener(types[--i], handler, false);\n        }\n      } else {\n        this.onmousewheel = handler;\n      }\n    },\n\n    teardown: function () {\n      if (this.removeEventListener) {\n        for (var i = types.length; i;) {\n          this.removeEventListener(types[--i], handler, false);\n        }\n      } else {\n        this.onmousewheel = null;\n      }\n    }\n  };\n\n  $.fn.extend({\n    mousewheel: function (fn) {\n      return fn ? this.bind(\"mousewheel\", fn) : this.trigger(\"mousewheel\");\n    },\n\n    unmousewheel: function (fn) {\n      return this.unbind(\"mousewheel\", fn);\n    }\n  });\n\n\n  function handler(event) {\n    var orgEvent = event || window.event, args = [].slice.call(arguments, 1), delta = 0, returnValue = true, deltaX = 0, deltaY = 0;\n    event = $.event.fix(orgEvent);\n    event.type = \"mousewheel\";\n\n    // Old school scrollwheel delta\n    if (orgEvent.wheelDelta) {\n      delta = orgEvent.wheelDelta / 120;\n    }\n    if (orgEvent.detail) {\n      delta = -orgEvent.detail / 3;\n    }\n\n    // New school multidimensional scroll (touchpads) deltas\n    deltaY = delta;\n\n    // Gecko\n    if (orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {\n      deltaY = 0;\n      deltaX = delta;\n    }\n\n    // Webkit\n    if (orgEvent.wheelDeltaY !== undefined) {\n      deltaY = orgEvent.wheelDeltaY / 120;\n    }\n    if (orgEvent.wheelDeltaX !== undefined) {\n      deltaX = orgEvent.wheelDeltaX / 120;\n    }\n\n    // Add event and delta to the front of the arguments\n    args.unshift(event, delta, deltaX, deltaY);\n\n    return ($.event.dispatch || $.event.handle).apply(this, args);\n  }\n\n})(jQuery);\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA;\n *\n *\n */\ndefine('taoCe/controller/home/splash',['jquery', 'taoCe/controller/home/custom-scrollbar'], function ($) {\n    'use strict';\n\n\n    /**\n     * The SplashScreen creates a modal popup that contains a  dynamic diagram of the TAO's workflow.\n     * It relies on content that should be there on a .splash-screen-wrapper element. (This content is loaded from the\n     * server by {@link module:taoCe/controller/home}\n     *\n     * @exports taoCe/controller/home/splash\n     */\n    var SplashScreen = {\n\n        /**\n         * Initialize the splash screen\n         * @param {Boolean} [isHomePage = false] - less options if not used as an entry splash\n         */\n        init: function (isHomePage) {\n\n            //console.log(this)\n            this.$splashScreen = $('#splash-screen');\n            var $splashWrapper = $('.splash-screen-wrapper');\n            var $splashDesc = $('.desc', this.$splashScreen);\n            var $splashDiagram = $('.diagram', this.$splashScreen);\n\n            //Url to redirect after closing\n            this.redirectUrl = '';\n\n            //overwrites main styles\n            $splashWrapper.css('display', 'block');\n\n            if (!isHomePage) {\n                $('.modal-footer', this.$splashScreen).hide();\n            }\n            else {\n                $('.modal-footer', this.$splashScreen).show();\n            }\n\n            /**\n             * Place lock icon for disabled modules\n             */\n            $('[data-module-name]', $splashDiagram).each(function () {\n                var $this = $(this);\n\n                if ($this.hasClass('disabled')) {\n\n\n                    $this.find('span').remove();\n                    $this.prepend('<span class=\"icon-lock\"></span>');\n                }\n            });\n\n            /**\n             * Initialize custom scrollbar for the description\n             */\n            $splashDesc.customScrollbar({\n                updateOnWindowResize: true,\n                skin: 'gray-skin',\n                hScroll: false\n            });\n\n            /**\n             * Open modal window immediately\n             */\n            this.$splashScreen.modal({disableClosing: isHomePage});\n\n            this.initNav();\n            this.initModulesNav();\n            this.initCloseButton();\n            //this.adaptHeight();\n        },\n\n        /**\n         * Initialize a listener for the navigation tab buttons\n         */\n        initNav: function () {\n            $('.modal-nav a', this.$splashScreen).on('click', function () {\n                var selectedEl = $(this),\n                    selectedPanelId = selectedEl.data('panel');\n\n                $('.modal-nav li').removeClass('active');\n                $(\"a[data-panel='\" + selectedPanelId + \"']\").parent().addClass('active');\n\n                $('.panels').hide();\n                $(\"div[data-panel-id='\" + selectedPanelId + \"']\").show();\n            });\n        },\n\n        /**\n         * Initialize a listener for the modules buttons\n         */\n        initModulesNav: function () {\n            var splashObj = this;\n\n            $('[data-module-name]', this.$splashScreen).not('.disabled').on('click', function () {\n                var selectedEl = $(this),\n                    selectedModuleName = selectedEl.data('module-name');\n                splashObj.redirectUrl = selectedEl.data('url');\n\n                $('#splash-close-btn').removeAttr('disabled').find('.module-name').text(selectedEl.text());\n\n                if (!selectedEl.hasClass('new-module')) {\n                    var selectedClass = selectedEl.hasClass('groups') ?\n                        $('.test-takers').find('span').first().attr('class') :\n                        selectedEl.find('span').first().attr('class');\n                    $('.module-desc>span').attr({'class': selectedClass});\n                }\n                else {\n                    $('.module-desc>span').attr({'class': ''});\n                }\n\n                $('[data-module-name]').removeClass('active');\n                $('.module-desc').hide();\n\n                selectedEl.addClass('active');\n                $(\"div[data-module='\" + selectedModuleName + \"']\").show();\n\n                $('.desc').customScrollbar('resize', true);\n            });\n        },\n\n        /**\n         * Initialize a listener for the close button\n         */\n        initCloseButton: function () {\n            var splashObj = this;\n            var $closeButton = $('#splash-close-btn');\n\n            //trigger the close by keypress enter\n            $(document).on('keypress', function (e) {\n                if (e.which === 13) {\n                    $closeButton.trigger('click');\n                }\n            });\n\n            //clean unbind\n            this.$splashScreen.on('closed.modal', function () {\n                $(document).off('keypress');\n            });\n\n            $closeButton.on('click', function (e) {\n                e.preventDefault();\n\n                //if the checkbox is checked, then add and set the additional GET parameter 'nosplash'\n                if ($('#nosplash').prop('checked')) {\n                    splashObj.redirectUrl += '&nosplash=true';\n                }\n\n                splashObj.closeSplash(splashObj.redirectUrl);\n            });\n        },\n\n        /**\n         * Close the splash screen and redirect to selected module\n         * @param {string} url\n         */\n        closeSplash: function (url) {\n            window.location = url;\n        },\n\n        /**\n         * limit height of splash to make sure all buttons can be accessed on smaller screens\n         */\n        adaptHeight: function() {\n            //console.log(this)\n            var splashObj = this,\n                $splashContentWrap = splashObj.find('.splash-content-wrap'),\n                // 40 to have some nice margin below\n                maxHeight = $(window).height() - splashObj.find('.modal-title').offset().top - 40;\n            $splashContentWrap.css({ maxHeight: maxHeight });\n        }\n\n    };\n\n    return SplashScreen;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA;\n *\n *\n */\ndefine('taoCe/controller/home',[\n    'jquery',\n    'util/url',\n    'taoCe/controller/home/splash'\n], function($, urlUtil, splash) {\n    'use strict';\n\n    const $mainContainer = $('body');\n\n    /**\n     * The homeController set up the splash screen.\n     *\n     * @exports taoCe/controller/home\n     */\n    const homeController = {\n\n\n        entrySplash : true,\n\n        /**\n         * Setup the splash screen: loads it's content and initialize the component.\n         */\n        start: function start() {\n\n            //the splash content is loaded only once.\n            if ($('#splash-screen', $mainContainer).length === 0) {\n\n                $.get(urlUtil.route('splash', 'Home', 'taoCe'))\n                    .success( response => {\n                        const $splash = $(response);\n                        $splash.css('display', 'none');\n\n                        $mainContainer.append($splash);\n\n                        splash.init(this.entrySplash);\n                    });\n            } else {\n                splash.init(this.entrySplash);\n            }\n        }\n    };\n\n    return homeController;\n});\n\n","/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA;\n *\n *\n */\ndefine('taoCe/controller/help',[\n    'taoCe/controller/home'\n], function(homeController){\n    'use strict';\n\n    return Object.assign({ entrySplash : false }, homeController);\n});\n\n","\n/**\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; under version 2\n * of the License (non-upgradable).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n *\n * Copyright (c) 2014 (original work) Open Assessment Technologies SA (under the project TAO-PRODUCT);\n * \n * \n */\n\n//@see http://forge.taotesting.com/projects/tao/wiki/Front_js\ndefine('taoCe/controller/routes',[],function(){\n    'use strict';\n\n    return {\n        'Home' : {\n            'css' : 'home.css'\n        },\n        'Main':{\n            'actions': {\n                'index' : 'controller/home'\n            }\n        }\n    };\n});\n","\ndefine(\"taoCe/loader/taoCe.bundle\", function(){});\n"]}